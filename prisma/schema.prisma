datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Doctor
  Nurse
  Receptionist
  Pharmacist
  Accountant
  Admin
}

enum Gender {
  Male
  Female
  Other
}

enum BloodGroup {
  A_Positive
  A_Negative
  B_Positive
  B_Negative
  AB_Positive
  AB_Negative
  O_Positive
  O_Negative
}

enum MedicineInstruction {
  BeforeMeal
  AfterMeal
  WithFood
  WithWater
  AsNeeded
  AsDirected
}

enum MedicineFrequency {
  OnceADay
  TwiceADay
  ThreeTimesADay
  FourTimesADay
  FiveTimesADay
}

enum AppointmentStatus {
  Pending
  Approved
  Rejected
  Cancelled
  Completed
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String           @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  role             Role             @default(User)
  pushSubscription PushSubscriber[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PushSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String
  auth      String
  p256dh    String
  
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}


model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  gender    Gender
  phone     String
  address   String
  imageUrl  String?
  dob       DateTime
  emergencyContact String
  bloodGroup BloodGroup?

  health PatientHealth?
  medicalRecords MedicalRecord[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model PatientHealth {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bloodGroup BloodGroup
  height     Int
  weight     Int
  allergies  String?
  habits   String?
  medicalHistory String?

  patientId String @db.ObjectId @unique
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String
  address   String
  imageUrl  String?

  medicalRecords MedicalRecord[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model MedicalRecord {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  complains     String
  diagnosis String?
  vitalSigns String?

  doctorId  String @db.ObjectId
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  patientId String @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  medicines MedicalRecordMedicine[]
  treatments MedicalRecordTreatment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([doctorId])
  @@index([patientId])
}

model Treatment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  description String

  categoryId  String @db.ObjectId
  category    TreatmentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  medicalRecordTreatments MedicalRecordTreatment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model MedicalRecordTreatment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  treatmentId String @db.ObjectId
  treatment Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  medicalRecordId String @db.ObjectId
  medicalRecord MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([medicalRecordId])
  @@index([treatmentId])
}

model MedicalRecordMedicine {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  instruction MedicineInstruction
  frequency MedicineFrequency
  quantity Int

  medicineId String @db.ObjectId
  medicine   Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade)

  medicalRecordId String @db.ObjectId
  medicalRecord MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([medicalRecordId])
  @@index([medicineId])
}

model TreatmentCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?

  treatments Treatment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medicine {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?
  sideEffects String?
  price Int

  genericId String? @db.ObjectId
  generic   MedicineGeneric? @relation(fields: [genericId], references: [id])

  manufacturerId String? @db.ObjectId
  manufacturer   MedicineManufacturer? @relation(fields: [manufacturerId], references: [id])

  medicalRecordMedicines MedicalRecordMedicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicineGeneric {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?

  medicines Medicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicineManufacturer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  description String?
  imageUrl  String?

  medicines Medicine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Appointment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  purpose   String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(Pending)

  patientId String @db.ObjectId
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  doctorId  String @db.ObjectId
  doctor    Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
}